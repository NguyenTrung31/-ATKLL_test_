
DATKLL231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002490  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800259c  0800259c  0001259c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e8  080025e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025e8  080025e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025e8  080025e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025ec  080025ec  000125ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  080025fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  080025fc  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050e3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001530  00000000  00000000  00025118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  00026648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000510  00000000  00000000  00026c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015eb0  00000000  00000000  00027120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a39  00000000  00000000  0003cfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bff3  00000000  00000000  00043a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bf9fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001508  00000000  00000000  000bfa50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002584 	.word	0x08002584

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002584 	.word	0x08002584

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fba6 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f850 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ec 	bl	8000334 <MX_GPIO_Init>
  MX_RTC_Init();
 800015c:	f000 f8a0 	bl	80002a0 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_SET)
 8000160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000164:	481d      	ldr	r0, [pc, #116]	; (80001dc <main+0x90>)
 8000166:	f000 fe7f 	bl	8000e68 <HAL_GPIO_ReadPin>
 800016a:	4603      	mov	r3, r0
 800016c:	2b01      	cmp	r3, #1
 800016e:	d10e      	bne.n	800018e <main+0x42>
	      {
	        button1Pressed++;
 8000170:	4b1b      	ldr	r3, [pc, #108]	; (80001e0 <main+0x94>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	3301      	adds	r3, #1
 8000176:	4a1a      	ldr	r2, [pc, #104]	; (80001e0 <main+0x94>)
 8000178:	6013      	str	r3, [r2, #0]
	        if (button1Pressed == 3000)  // 3 giây
 800017a:	4b19      	ldr	r3, [pc, #100]	; (80001e0 <main+0x94>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000182:	4293      	cmp	r3, r2
 8000184:	d106      	bne.n	8000194 <main+0x48>
	        {
	          displayMode = 1;
 8000186:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <main+0x98>)
 8000188:	2201      	movs	r2, #1
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	e002      	b.n	8000194 <main+0x48>
	        }
	      }
	      else
	      {
	        button1Pressed = 0;
 800018e:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <main+0x94>)
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
	      }

	      if (displayMode == 0)
 8000194:	4b13      	ldr	r3, [pc, #76]	; (80001e4 <main+0x98>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d107      	bne.n	80001ac <main+0x60>
	      {
	        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800019c:	2201      	movs	r2, #1
 800019e:	4912      	ldr	r1, [pc, #72]	; (80001e8 <main+0x9c>)
 80001a0:	4812      	ldr	r0, [pc, #72]	; (80001ec <main+0xa0>)
 80001a2:	f001 fd3f 	bl	8001c24 <HAL_RTC_GetTime>
	        DisplayTimeOn7Segment();
 80001a6:	f000 f93f 	bl	8000428 <DisplayTimeOn7Segment>
 80001aa:	e00d      	b.n	80001c8 <main+0x7c>
	      }
	      else
	      {
	        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80001ac:	2201      	movs	r2, #1
 80001ae:	4910      	ldr	r1, [pc, #64]	; (80001f0 <main+0xa4>)
 80001b0:	480e      	ldr	r0, [pc, #56]	; (80001ec <main+0xa0>)
 80001b2:	f001 fec5 	bl	8001f40 <HAL_RTC_GetDate>
	        DisplayDateOn7Segment();
 80001b6:	f000 f9fd 	bl	80005b4 <DisplayDateOn7Segment>
	        HAL_Delay(5000);
 80001ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80001be:	f000 fbd1 	bl	8000964 <HAL_Delay>
	        displayMode = 0;  // Quay lại chế độ hiển thị thời gian
 80001c2:	4b08      	ldr	r3, [pc, #32]	; (80001e4 <main+0x98>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
	      }

	      HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);  // Nhấp nháy dot mỗi giây
 80001c8:	2110      	movs	r1, #16
 80001ca:	480a      	ldr	r0, [pc, #40]	; (80001f4 <main+0xa8>)
 80001cc:	f000 fe7b 	bl	8000ec6 <HAL_GPIO_TogglePin>
	      HAL_Delay(1000);
 80001d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d4:	f000 fbc6 	bl	8000964 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_SET)
 80001d8:	e7c2      	b.n	8000160 <main+0x14>
 80001da:	bf00      	nop
 80001dc:	40010c00 	.word	0x40010c00
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	20000028 	.word	0x20000028
 80001e8:	20000030 	.word	0x20000030
 80001ec:	20000038 	.word	0x20000038
 80001f0:	20000034 	.word	0x20000034
 80001f4:	40010800 	.word	0x40010800

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b094      	sub	sp, #80	; 0x50
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f9b4 	bl	8002574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000228:	230a      	movs	r3, #10
 800022a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000230:	2310      	movs	r3, #16
 8000232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000238:	2300      	movs	r3, #0
 800023a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fe65 	bl	8000f10 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800024c:	f000 fa78 	bl	8000740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000254:	2300      	movs	r3, #0
 8000256:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 f8d0 	bl	8001410 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000276:	f000 fa63 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800027a:	2301      	movs	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800027e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000282:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fa3c 	bl	8001704 <HAL_RCCEx_PeriphCLKConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000292:	f000 fa55 	bl	8000740 <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3750      	adds	r7, #80	; 0x50
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2100      	movs	r1, #0
 80002aa:	460a      	mov	r2, r1
 80002ac:	801a      	strh	r2, [r3, #0]
 80002ae:	460a      	mov	r2, r1
 80002b0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80002b2:	2300      	movs	r3, #0
 80002b4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <MX_RTC_Init+0x8c>)
 80002b8:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <MX_RTC_Init+0x90>)
 80002ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_RTC_Init+0x8c>)
 80002be:	f04f 32ff 	mov.w	r2, #4294967295
 80002c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <MX_RTC_Init+0x8c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002ca:	4818      	ldr	r0, [pc, #96]	; (800032c <MX_RTC_Init+0x8c>)
 80002cc:	f001 fb86 	bl	80019dc <HAL_RTC_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80002d6:	f000 fa33 	bl	8000740 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x4;
 80002da:	2304      	movs	r3, #4
 80002dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80002de:	2300      	movs	r3, #0
 80002e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2201      	movs	r2, #1
 80002ea:	4619      	mov	r1, r3
 80002ec:	480f      	ldr	r0, [pc, #60]	; (800032c <MX_RTC_Init+0x8c>)
 80002ee:	f001 fc01 	bl	8001af4 <HAL_RTC_SetTime>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80002f8:	f000 fa22 	bl	8000740 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80002fc:	2300      	movs	r3, #0
 80002fe:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_DECEMBER;
 8000300:	2312      	movs	r3, #18
 8000302:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x17;
 8000304:	2317      	movs	r3, #23
 8000306:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 8000308:	2323      	movs	r3, #35	; 0x23
 800030a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800030c:	463b      	mov	r3, r7
 800030e:	2201      	movs	r2, #1
 8000310:	4619      	mov	r1, r3
 8000312:	4806      	ldr	r0, [pc, #24]	; (800032c <MX_RTC_Init+0x8c>)
 8000314:	f001 fd5e 	bl	8001dd4 <HAL_RTC_SetDate>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800031e:	f000 fa0f 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000038 	.word	0x20000038
 8000330:	40002800 	.word	0x40002800

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000348:	4b34      	ldr	r3, [pc, #208]	; (800041c <MX_GPIO_Init+0xe8>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a33      	ldr	r2, [pc, #204]	; (800041c <MX_GPIO_Init+0xe8>)
 800034e:	f043 0310 	orr.w	r3, r3, #16
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b31      	ldr	r3, [pc, #196]	; (800041c <MX_GPIO_Init+0xe8>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0310 	and.w	r3, r3, #16
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000360:	4b2e      	ldr	r3, [pc, #184]	; (800041c <MX_GPIO_Init+0xe8>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a2d      	ldr	r2, [pc, #180]	; (800041c <MX_GPIO_Init+0xe8>)
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b2b      	ldr	r3, [pc, #172]	; (800041c <MX_GPIO_Init+0xe8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0320 	and.w	r3, r3, #32
 8000374:	60bb      	str	r3, [r7, #8]
 8000376:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	4b28      	ldr	r3, [pc, #160]	; (800041c <MX_GPIO_Init+0xe8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a27      	ldr	r2, [pc, #156]	; (800041c <MX_GPIO_Init+0xe8>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b25      	ldr	r3, [pc, #148]	; (800041c <MX_GPIO_Init+0xe8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0304 	and.w	r3, r3, #4
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000390:	4b22      	ldr	r3, [pc, #136]	; (800041c <MX_GPIO_Init+0xe8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a21      	ldr	r2, [pc, #132]	; (800041c <MX_GPIO_Init+0xe8>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <MX_GPIO_Init+0xe8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	603b      	str	r3, [r7, #0]
 80003a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DOT_Pin|LED_RED_Pin|EN0_Pin|EN1_Pin
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 80003ae:	481c      	ldr	r0, [pc, #112]	; (8000420 <MX_GPIO_Init+0xec>)
 80003b0:	f000 fd71 	bl	8000e96 <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80003b4:	2200      	movs	r2, #0
 80003b6:	217f      	movs	r1, #127	; 0x7f
 80003b8:	481a      	ldr	r0, [pc, #104]	; (8000424 <MX_GPIO_Init+0xf0>)
 80003ba:	f000 fd6c 	bl	8000e96 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DOT_Pin LED_RED_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin EN5_Pin */
  GPIO_InitStruct.Pin = DOT_Pin|LED_RED_Pin|EN0_Pin|EN1_Pin
 80003be:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 80003c2:	613b      	str	r3, [r7, #16]
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003cc:	2302      	movs	r3, #2
 80003ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	4812      	ldr	r0, [pc, #72]	; (8000420 <MX_GPIO_Init+0xec>)
 80003d8:	f000 fbcc 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80003dc:	237f      	movs	r3, #127	; 0x7f
 80003de:	613b      	str	r3, [r7, #16]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	480c      	ldr	r0, [pc, #48]	; (8000424 <MX_GPIO_Init+0xf0>)
 80003f4:	f000 fbbe 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80003f8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	4619      	mov	r1, r3
 800040c:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_GPIO_Init+0xf0>)
 800040e:	f000 fbb1 	bl	8000b74 <HAL_GPIO_Init>

}
 8000412:	bf00      	nop
 8000414:	3720      	adds	r7, #32
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000
 8000420:	40010800 	.word	0x40010800
 8000424:	40010c00 	.word	0x40010c00

08000428 <DisplayTimeOn7Segment>:

/* USER CODE BEGIN 4 */
void DisplayTimeOn7Segment(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
  uint8_t hour = (sTime.Hours & 0xF) + ((sTime.Hours >> 4) * 10);
 800042e:	4b5c      	ldr	r3, [pc, #368]	; (80005a0 <DisplayTimeOn7Segment+0x178>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	f003 030f 	and.w	r3, r3, #15
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b59      	ldr	r3, [pc, #356]	; (80005a0 <DisplayTimeOn7Segment+0x178>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	091b      	lsrs	r3, r3, #4
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4619      	mov	r1, r3
 8000442:	0089      	lsls	r1, r1, #2
 8000444:	440b      	add	r3, r1
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	b2db      	uxtb	r3, r3
 800044a:	4413      	add	r3, r2
 800044c:	73fb      	strb	r3, [r7, #15]
  uint8_t minute = (sTime.Minutes & 0xF) + ((sTime.Minutes >> 4) * 10);
 800044e:	4b54      	ldr	r3, [pc, #336]	; (80005a0 <DisplayTimeOn7Segment+0x178>)
 8000450:	785b      	ldrb	r3, [r3, #1]
 8000452:	f003 030f 	and.w	r3, r3, #15
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b51      	ldr	r3, [pc, #324]	; (80005a0 <DisplayTimeOn7Segment+0x178>)
 800045a:	785b      	ldrb	r3, [r3, #1]
 800045c:	091b      	lsrs	r3, r3, #4
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	0089      	lsls	r1, r1, #2
 8000464:	440b      	add	r3, r1
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	b2db      	uxtb	r3, r3
 800046a:	4413      	add	r3, r2
 800046c:	73bb      	strb	r3, [r7, #14]
  uint8_t second = (sTime.Seconds & 0xF) + ((sTime.Seconds >> 4) * 10);
 800046e:	4b4c      	ldr	r3, [pc, #304]	; (80005a0 <DisplayTimeOn7Segment+0x178>)
 8000470:	789b      	ldrb	r3, [r3, #2]
 8000472:	f003 030f 	and.w	r3, r3, #15
 8000476:	b2da      	uxtb	r2, r3
 8000478:	4b49      	ldr	r3, [pc, #292]	; (80005a0 <DisplayTimeOn7Segment+0x178>)
 800047a:	789b      	ldrb	r3, [r3, #2]
 800047c:	091b      	lsrs	r3, r3, #4
 800047e:	b2db      	uxtb	r3, r3
 8000480:	4619      	mov	r1, r3
 8000482:	0089      	lsls	r1, r1, #2
 8000484:	440b      	add	r3, r1
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4413      	add	r3, r2
 800048c:	737b      	strb	r3, [r7, #13]

  uint8_t digitValues[6] = {
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	4a44      	ldr	r2, [pc, #272]	; (80005a4 <DisplayTimeOn7Segment+0x17c>)
 8000492:	fba2 2303 	umull	r2, r3, r2, r3
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	b2db      	uxtb	r3, r3
 800049a:	713b      	strb	r3, [r7, #4]
 800049c:	7bfa      	ldrb	r2, [r7, #15]
 800049e:	4b41      	ldr	r3, [pc, #260]	; (80005a4 <DisplayTimeOn7Segment+0x17c>)
 80004a0:	fba3 1302 	umull	r1, r3, r3, r2
 80004a4:	08d9      	lsrs	r1, r3, #3
 80004a6:	460b      	mov	r3, r1
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	440b      	add	r3, r1
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	717b      	strb	r3, [r7, #5]
 80004b4:	7bbb      	ldrb	r3, [r7, #14]
 80004b6:	4a3b      	ldr	r2, [pc, #236]	; (80005a4 <DisplayTimeOn7Segment+0x17c>)
 80004b8:	fba2 2303 	umull	r2, r3, r2, r3
 80004bc:	08db      	lsrs	r3, r3, #3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	71bb      	strb	r3, [r7, #6]
 80004c2:	7bba      	ldrb	r2, [r7, #14]
 80004c4:	4b37      	ldr	r3, [pc, #220]	; (80005a4 <DisplayTimeOn7Segment+0x17c>)
 80004c6:	fba3 1302 	umull	r1, r3, r3, r2
 80004ca:	08d9      	lsrs	r1, r3, #3
 80004cc:	460b      	mov	r3, r1
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	440b      	add	r3, r1
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	7b7b      	ldrb	r3, [r7, #13]
 80004dc:	4a31      	ldr	r2, [pc, #196]	; (80005a4 <DisplayTimeOn7Segment+0x17c>)
 80004de:	fba2 2303 	umull	r2, r3, r2, r3
 80004e2:	08db      	lsrs	r3, r3, #3
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	723b      	strb	r3, [r7, #8]
 80004e8:	7b7a      	ldrb	r2, [r7, #13]
 80004ea:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <DisplayTimeOn7Segment+0x17c>)
 80004ec:	fba3 1302 	umull	r1, r3, r3, r2
 80004f0:	08d9      	lsrs	r1, r3, #3
 80004f2:	460b      	mov	r3, r1
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	440b      	add	r3, r1
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	727b      	strb	r3, [r7, #9]
    hour / 10, hour % 10,
    minute / 10, minute % 10,
    second / 10, second % 10
  };

  for (int digit = 0; digit < 6; ++digit)
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	e043      	b.n	800058e <DisplayTimeOn7Segment+0x166>
  {
    // Hiển thị giá trị của mỗi chữ số lên LED 7 đoạn tương ứng
    for (int segment = 0; segment < 7; ++segment)
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	e03a      	b.n	8000582 <DisplayTimeOn7Segment+0x15a>
    {
      uint8_t segmentValue = (sevenSegmentDigits[digitValues[digit]] >> segment) & 0x01;
 800050c:	1d3a      	adds	r2, r7, #4
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <DisplayTimeOn7Segment+0x180>)
 8000518:	5c9b      	ldrb	r3, [r3, r2]
 800051a:	461a      	mov	r2, r3
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	fa42 f303 	asr.w	r3, r2, r3
 8000522:	b2db      	uxtb	r3, r3
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	733b      	strb	r3, [r7, #12]
      HAL_GPIO_WritePin(GPIOB, SEG0_Pin + segment, segmentValue ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	b29b      	uxth	r3, r3
 800052e:	3301      	adds	r3, #1
 8000530:	b299      	uxth	r1, r3
 8000532:	7b3b      	ldrb	r3, [r7, #12]
 8000534:	2b00      	cmp	r3, #0
 8000536:	bf14      	ite	ne
 8000538:	2301      	movne	r3, #1
 800053a:	2300      	moveq	r3, #0
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	481a      	ldr	r0, [pc, #104]	; (80005ac <DisplayTimeOn7Segment+0x184>)
 8000542:	f000 fca8 	bl	8000e96 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, EN0_Pin + digit, GPIO_PIN_SET);  // Kích hoạt LED 7 đoạn tương ứng
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	b29b      	uxth	r3, r3
 800054a:	3340      	adds	r3, #64	; 0x40
 800054c:	b29b      	uxth	r3, r3
 800054e:	2201      	movs	r2, #1
 8000550:	4619      	mov	r1, r3
 8000552:	4817      	ldr	r0, [pc, #92]	; (80005b0 <DisplayTimeOn7Segment+0x188>)
 8000554:	f000 fc9f 	bl	8000e96 <HAL_GPIO_WritePin>
      for (volatile int i = 0; i < 100; ++i) {} // Tạo độ trễ ngắn
 8000558:	2300      	movs	r3, #0
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	e002      	b.n	8000564 <DisplayTimeOn7Segment+0x13c>
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	2b63      	cmp	r3, #99	; 0x63
 8000568:	ddf9      	ble.n	800055e <DisplayTimeOn7Segment+0x136>
      HAL_GPIO_WritePin(GPIOA, EN0_Pin + digit, GPIO_PIN_RESET);  // Tắt LED 7 đoạn
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	b29b      	uxth	r3, r3
 800056e:	3340      	adds	r3, #64	; 0x40
 8000570:	b29b      	uxth	r3, r3
 8000572:	2200      	movs	r2, #0
 8000574:	4619      	mov	r1, r3
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <DisplayTimeOn7Segment+0x188>)
 8000578:	f000 fc8d 	bl	8000e96 <HAL_GPIO_WritePin>
    for (int segment = 0; segment < 7; ++segment)
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	3301      	adds	r3, #1
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	2b06      	cmp	r3, #6
 8000586:	ddc1      	ble.n	800050c <DisplayTimeOn7Segment+0xe4>
  for (int digit = 0; digit < 6; ++digit)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	3301      	adds	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	2b05      	cmp	r3, #5
 8000592:	ddb8      	ble.n	8000506 <DisplayTimeOn7Segment+0xde>
    }
  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000030 	.word	0x20000030
 80005a4:	cccccccd 	.word	0xcccccccd
 80005a8:	0800259c 	.word	0x0800259c
 80005ac:	40010c00 	.word	0x40010c00
 80005b0:	40010800 	.word	0x40010800

080005b4 <DisplayDateOn7Segment>:
void DisplayDateOn7Segment(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  uint8_t day = (sDate.Date & 0xF) + ((sDate.Date >> 4) * 10);
 80005ba:	4b5c      	ldr	r3, [pc, #368]	; (800072c <DisplayDateOn7Segment+0x178>)
 80005bc:	789b      	ldrb	r3, [r3, #2]
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b59      	ldr	r3, [pc, #356]	; (800072c <DisplayDateOn7Segment+0x178>)
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	091b      	lsrs	r3, r3, #4
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	4619      	mov	r1, r3
 80005ce:	0089      	lsls	r1, r1, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4413      	add	r3, r2
 80005d8:	73fb      	strb	r3, [r7, #15]
  uint8_t month = (sDate.Month & 0xF) + ((sDate.Month >> 4) * 10);
 80005da:	4b54      	ldr	r3, [pc, #336]	; (800072c <DisplayDateOn7Segment+0x178>)
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b51      	ldr	r3, [pc, #324]	; (800072c <DisplayDateOn7Segment+0x178>)
 80005e6:	785b      	ldrb	r3, [r3, #1]
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	0089      	lsls	r1, r1, #2
 80005f0:	440b      	add	r3, r1
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4413      	add	r3, r2
 80005f8:	73bb      	strb	r3, [r7, #14]
  uint8_t year = (sDate.Year & 0xF) + ((sDate.Year >> 4) * 10);
 80005fa:	4b4c      	ldr	r3, [pc, #304]	; (800072c <DisplayDateOn7Segment+0x178>)
 80005fc:	78db      	ldrb	r3, [r3, #3]
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b49      	ldr	r3, [pc, #292]	; (800072c <DisplayDateOn7Segment+0x178>)
 8000606:	78db      	ldrb	r3, [r3, #3]
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4619      	mov	r1, r3
 800060e:	0089      	lsls	r1, r1, #2
 8000610:	440b      	add	r3, r1
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4413      	add	r3, r2
 8000618:	737b      	strb	r3, [r7, #13]

  uint8_t digitValues[6] = {
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4a44      	ldr	r2, [pc, #272]	; (8000730 <DisplayDateOn7Segment+0x17c>)
 800061e:	fba2 2303 	umull	r2, r3, r2, r3
 8000622:	08db      	lsrs	r3, r3, #3
 8000624:	b2db      	uxtb	r3, r3
 8000626:	713b      	strb	r3, [r7, #4]
 8000628:	7bfa      	ldrb	r2, [r7, #15]
 800062a:	4b41      	ldr	r3, [pc, #260]	; (8000730 <DisplayDateOn7Segment+0x17c>)
 800062c:	fba3 1302 	umull	r1, r3, r3, r2
 8000630:	08d9      	lsrs	r1, r3, #3
 8000632:	460b      	mov	r3, r1
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	440b      	add	r3, r1
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	717b      	strb	r3, [r7, #5]
 8000640:	7bbb      	ldrb	r3, [r7, #14]
 8000642:	4a3b      	ldr	r2, [pc, #236]	; (8000730 <DisplayDateOn7Segment+0x17c>)
 8000644:	fba2 2303 	umull	r2, r3, r2, r3
 8000648:	08db      	lsrs	r3, r3, #3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	71bb      	strb	r3, [r7, #6]
 800064e:	7bba      	ldrb	r2, [r7, #14]
 8000650:	4b37      	ldr	r3, [pc, #220]	; (8000730 <DisplayDateOn7Segment+0x17c>)
 8000652:	fba3 1302 	umull	r1, r3, r3, r2
 8000656:	08d9      	lsrs	r1, r3, #3
 8000658:	460b      	mov	r3, r1
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	440b      	add	r3, r1
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	7b7b      	ldrb	r3, [r7, #13]
 8000668:	4a31      	ldr	r2, [pc, #196]	; (8000730 <DisplayDateOn7Segment+0x17c>)
 800066a:	fba2 2303 	umull	r2, r3, r2, r3
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	723b      	strb	r3, [r7, #8]
 8000674:	7b7a      	ldrb	r2, [r7, #13]
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <DisplayDateOn7Segment+0x17c>)
 8000678:	fba3 1302 	umull	r1, r3, r3, r2
 800067c:	08d9      	lsrs	r1, r3, #3
 800067e:	460b      	mov	r3, r1
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	440b      	add	r3, r1
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	727b      	strb	r3, [r7, #9]
    day / 10, day % 10,
    month / 10, month % 10,
    year / 10, year % 10
  };

  for (int digit = 0; digit < 6; ++digit)
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	e043      	b.n	800071a <DisplayDateOn7Segment+0x166>
  {
    // Hiển thị giá trị của mỗi chữ số lên LED 7 đoạn tương ứng
    for (int segment = 0; segment < 7; ++segment)
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	e03a      	b.n	800070e <DisplayDateOn7Segment+0x15a>
    {
      uint8_t segmentValue = (sevenSegmentDigits[digitValues[digit]] >> segment) & 0x01;
 8000698:	1d3a      	adds	r2, r7, #4
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	4413      	add	r3, r2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <DisplayDateOn7Segment+0x180>)
 80006a4:	5c9b      	ldrb	r3, [r3, r2]
 80006a6:	461a      	mov	r2, r3
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	fa42 f303 	asr.w	r3, r2, r3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	733b      	strb	r3, [r7, #12]
      HAL_GPIO_WritePin(GPIOB, SEG0_Pin + segment, segmentValue ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	3301      	adds	r3, #1
 80006bc:	b299      	uxth	r1, r3
 80006be:	7b3b      	ldrb	r3, [r7, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	bf14      	ite	ne
 80006c4:	2301      	movne	r3, #1
 80006c6:	2300      	moveq	r3, #0
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	481a      	ldr	r0, [pc, #104]	; (8000738 <DisplayDateOn7Segment+0x184>)
 80006ce:	f000 fbe2 	bl	8000e96 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, EN0_Pin + digit, GPIO_PIN_SET);  // Kích hoạt LED 7 đoạn tương ứng
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	3340      	adds	r3, #64	; 0x40
 80006d8:	b29b      	uxth	r3, r3
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <DisplayDateOn7Segment+0x188>)
 80006e0:	f000 fbd9 	bl	8000e96 <HAL_GPIO_WritePin>
      for (volatile int i = 0; i < 100; ++i) {} // Tạo độ trễ ngắn
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	e002      	b.n	80006f0 <DisplayDateOn7Segment+0x13c>
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	2b63      	cmp	r3, #99	; 0x63
 80006f4:	ddf9      	ble.n	80006ea <DisplayDateOn7Segment+0x136>
      HAL_GPIO_WritePin(GPIOA, EN0_Pin + digit, GPIO_PIN_RESET);  // Tắt LED 7 đoạn
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	3340      	adds	r3, #64	; 0x40
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	2200      	movs	r2, #0
 8000700:	4619      	mov	r1, r3
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <DisplayDateOn7Segment+0x188>)
 8000704:	f000 fbc7 	bl	8000e96 <HAL_GPIO_WritePin>
    for (int segment = 0; segment < 7; ++segment)
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	3301      	adds	r3, #1
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	2b06      	cmp	r3, #6
 8000712:	ddc1      	ble.n	8000698 <DisplayDateOn7Segment+0xe4>
  for (int digit = 0; digit < 6; ++digit)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	2b05      	cmp	r3, #5
 800071e:	ddb8      	ble.n	8000692 <DisplayDateOn7Segment+0xde>
    }
  }
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000034 	.word	0x20000034
 8000730:	cccccccd 	.word	0xcccccccd
 8000734:	0800259c 	.word	0x0800259c
 8000738:	40010c00 	.word	0x40010c00
 800073c:	40010800 	.word	0x40010800

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_MspInit+0x5c>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <HAL_MspInit+0x5c>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_MspInit+0x5c>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x5c>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <HAL_MspInit+0x5c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_MspInit+0x5c>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_MspInit+0x60>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_MspInit+0x60>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010000 	.word	0x40010000

080007b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <HAL_RTC_MspInit+0x3c>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d110      	bne.n	80007e4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80007c2:	f000 fb99 	bl	8000ef8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_RTC_MspInit+0x40>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <HAL_RTC_MspInit+0x40>)
 80007cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <HAL_RTC_MspInit+0x40>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_RTC_MspInit+0x44>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40002800 	.word	0x40002800
 80007f0:	40021000 	.word	0x40021000
 80007f4:	4242043c 	.word	0x4242043c

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083e:	f000 f875 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}

08000846 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
	...

08000854 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000854:	f7ff fff7 	bl	8000846 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800085a:	490c      	ldr	r1, [pc, #48]	; (800088c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <LoopFillZerobss+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000870:	4c09      	ldr	r4, [pc, #36]	; (8000898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087e:	f001 fe55 	bl	800252c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000882:	f7ff fc63 	bl	800014c <main>
  bx lr
 8000886:	4770      	bx	lr
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000890:	080025f0 	.word	0x080025f0
  ldr r2, =_sbss
 8000894:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000898:	20000050 	.word	0x20000050

0800089c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_2_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_Init+0x28>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_Init+0x28>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f92b 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff ff46 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f935 	bl	8000b5a <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f000 f90b 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000008 	.word	0x20000008
 800094c:	2000004c 	.word	0x2000004c

08000950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	2000004c 	.word	0x2000004c

08000964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff fff0 	bl	8000950 <HAL_GetTick>
 8000970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097c:	d005      	beq.n	800098a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_Delay+0x44>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800098a:	bf00      	nop
 800098c:	f7ff ffe0 	bl	8000950 <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d8f7      	bhi.n	800098c <HAL_Delay+0x28>
  {
  }
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff90 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff49 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff5e 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff90 	bl	8000a64 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5f 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ffb0 	bl	8000ac8 <SysTick_Config>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b08b      	sub	sp, #44	; 0x2c
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b86:	e148      	b.n	8000e1a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	f040 8137 	bne.w	8000e14 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	4aa3      	ldr	r2, [pc, #652]	; (8000e38 <HAL_GPIO_Init+0x2c4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d05e      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bb0:	4aa1      	ldr	r2, [pc, #644]	; (8000e38 <HAL_GPIO_Init+0x2c4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d875      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bb6:	4aa1      	ldr	r2, [pc, #644]	; (8000e3c <HAL_GPIO_Init+0x2c8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d058      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bbc:	4a9f      	ldr	r2, [pc, #636]	; (8000e3c <HAL_GPIO_Init+0x2c8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d86f      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bc2:	4a9f      	ldr	r2, [pc, #636]	; (8000e40 <HAL_GPIO_Init+0x2cc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d052      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bc8:	4a9d      	ldr	r2, [pc, #628]	; (8000e40 <HAL_GPIO_Init+0x2cc>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d869      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bce:	4a9d      	ldr	r2, [pc, #628]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d04c      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bd4:	4a9b      	ldr	r2, [pc, #620]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d863      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bda:	4a9b      	ldr	r2, [pc, #620]	; (8000e48 <HAL_GPIO_Init+0x2d4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d046      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000be0:	4a99      	ldr	r2, [pc, #612]	; (8000e48 <HAL_GPIO_Init+0x2d4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d85d      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000be6:	2b12      	cmp	r3, #18
 8000be8:	d82a      	bhi.n	8000c40 <HAL_GPIO_Init+0xcc>
 8000bea:	2b12      	cmp	r3, #18
 8000bec:	d859      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bee:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <HAL_GPIO_Init+0x80>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c6f 	.word	0x08000c6f
 8000bf8:	08000c49 	.word	0x08000c49
 8000bfc:	08000c5b 	.word	0x08000c5b
 8000c00:	08000c9d 	.word	0x08000c9d
 8000c04:	08000ca3 	.word	0x08000ca3
 8000c08:	08000ca3 	.word	0x08000ca3
 8000c0c:	08000ca3 	.word	0x08000ca3
 8000c10:	08000ca3 	.word	0x08000ca3
 8000c14:	08000ca3 	.word	0x08000ca3
 8000c18:	08000ca3 	.word	0x08000ca3
 8000c1c:	08000ca3 	.word	0x08000ca3
 8000c20:	08000ca3 	.word	0x08000ca3
 8000c24:	08000ca3 	.word	0x08000ca3
 8000c28:	08000ca3 	.word	0x08000ca3
 8000c2c:	08000ca3 	.word	0x08000ca3
 8000c30:	08000ca3 	.word	0x08000ca3
 8000c34:	08000ca3 	.word	0x08000ca3
 8000c38:	08000c51 	.word	0x08000c51
 8000c3c:	08000c65 	.word	0x08000c65
 8000c40:	4a82      	ldr	r2, [pc, #520]	; (8000e4c <HAL_GPIO_Init+0x2d8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d013      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c46:	e02c      	b.n	8000ca2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e029      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	3304      	adds	r3, #4
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e024      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	3308      	adds	r3, #8
 8000c60:	623b      	str	r3, [r7, #32]
          break;
 8000c62:	e01f      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	330c      	adds	r3, #12
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e01a      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c76:	2304      	movs	r3, #4
 8000c78:	623b      	str	r3, [r7, #32]
          break;
 8000c7a:	e013      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d105      	bne.n	8000c90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c84:	2308      	movs	r3, #8
 8000c86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	611a      	str	r2, [r3, #16]
          break;
 8000c8e:	e009      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c90:	2308      	movs	r3, #8
 8000c92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	615a      	str	r2, [r3, #20]
          break;
 8000c9a:	e003      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
          break;
 8000ca0:	e000      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          break;
 8000ca2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	2bff      	cmp	r3, #255	; 0xff
 8000ca8:	d801      	bhi.n	8000cae <HAL_GPIO_Init+0x13a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	e001      	b.n	8000cb2 <HAL_GPIO_Init+0x13e>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2bff      	cmp	r3, #255	; 0xff
 8000cb8:	d802      	bhi.n	8000cc0 <HAL_GPIO_Init+0x14c>
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0x152>
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3b08      	subs	r3, #8
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	210f      	movs	r1, #15
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	6a39      	ldr	r1, [r7, #32]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8090 	beq.w	8000e14 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf4:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <HAL_GPIO_Init+0x2dc>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a55      	ldr	r2, [pc, #340]	; (8000e50 <HAL_GPIO_Init+0x2dc>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <HAL_GPIO_Init+0x2dc>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d0c:	4a51      	ldr	r2, [pc, #324]	; (8000e54 <HAL_GPIO_Init+0x2e0>)
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	3302      	adds	r3, #2
 8000d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	220f      	movs	r2, #15
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a49      	ldr	r2, [pc, #292]	; (8000e58 <HAL_GPIO_Init+0x2e4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d00d      	beq.n	8000d54 <HAL_GPIO_Init+0x1e0>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a48      	ldr	r2, [pc, #288]	; (8000e5c <HAL_GPIO_Init+0x2e8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d007      	beq.n	8000d50 <HAL_GPIO_Init+0x1dc>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a47      	ldr	r2, [pc, #284]	; (8000e60 <HAL_GPIO_Init+0x2ec>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d101      	bne.n	8000d4c <HAL_GPIO_Init+0x1d8>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	e004      	b.n	8000d56 <HAL_GPIO_Init+0x1e2>
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x1e2>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <HAL_GPIO_Init+0x1e2>
 8000d54:	2300      	movs	r3, #0
 8000d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d58:	f002 0203 	and.w	r2, r2, #3
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	4093      	lsls	r3, r2
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d66:	493b      	ldr	r1, [pc, #236]	; (8000e54 <HAL_GPIO_Init+0x2e0>)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d80:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	4937      	ldr	r1, [pc, #220]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8e:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4933      	ldr	r1, [pc, #204]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da8:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	492d      	ldr	r1, [pc, #180]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60cb      	str	r3, [r1, #12]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4929      	ldr	r1, [pc, #164]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4923      	ldr	r1, [pc, #140]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	491f      	ldr	r1, [pc, #124]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4919      	ldr	r1, [pc, #100]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4915      	ldr	r1, [pc, #84]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	3301      	adds	r3, #1
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	fa22 f303 	lsr.w	r3, r2, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f47f aeaf 	bne.w	8000b88 <HAL_GPIO_Init+0x14>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	372c      	adds	r7, #44	; 0x2c
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	10320000 	.word	0x10320000
 8000e3c:	10310000 	.word	0x10310000
 8000e40:	10220000 	.word	0x10220000
 8000e44:	10210000 	.word	0x10210000
 8000e48:	10120000 	.word	0x10120000
 8000e4c:	10110000 	.word	0x10110000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea6:	787b      	ldrb	r3, [r7, #1]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eac:	887a      	ldrh	r2, [r7, #2]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb2:	e003      	b.n	8000ebc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	041a      	lsls	r2, r3, #16
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ed8:	887a      	ldrh	r2, [r7, #2]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4013      	ands	r3, r2
 8000ede:	041a      	lsls	r2, r3, #16
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	887b      	ldrh	r3, [r7, #2]
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	611a      	str	r2, [r3, #16]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_PWR_EnableBkUpAccess+0x14>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	420e0020 	.word	0x420e0020

08000f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e26c      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 8087 	beq.w	800103e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f30:	4b92      	ldr	r3, [pc, #584]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 030c 	and.w	r3, r3, #12
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d00c      	beq.n	8000f56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f3c:	4b8f      	ldr	r3, [pc, #572]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d112      	bne.n	8000f6e <HAL_RCC_OscConfig+0x5e>
 8000f48:	4b8c      	ldr	r3, [pc, #560]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f54:	d10b      	bne.n	8000f6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f56:	4b89      	ldr	r3, [pc, #548]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d06c      	beq.n	800103c <HAL_RCC_OscConfig+0x12c>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d168      	bne.n	800103c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e246      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f76:	d106      	bne.n	8000f86 <HAL_RCC_OscConfig+0x76>
 8000f78:	4b80      	ldr	r3, [pc, #512]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a7f      	ldr	r2, [pc, #508]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	e02e      	b.n	8000fe4 <HAL_RCC_OscConfig+0xd4>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x98>
 8000f8e:	4b7b      	ldr	r3, [pc, #492]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a7a      	ldr	r2, [pc, #488]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b78      	ldr	r3, [pc, #480]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a77      	ldr	r2, [pc, #476]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e01d      	b.n	8000fe4 <HAL_RCC_OscConfig+0xd4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0xbc>
 8000fb2:	4b72      	ldr	r3, [pc, #456]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a71      	ldr	r2, [pc, #452]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b6f      	ldr	r3, [pc, #444]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a6e      	ldr	r2, [pc, #440]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e00b      	b.n	8000fe4 <HAL_RCC_OscConfig+0xd4>
 8000fcc:	4b6b      	ldr	r3, [pc, #428]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a6a      	ldr	r2, [pc, #424]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b68      	ldr	r3, [pc, #416]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a67      	ldr	r2, [pc, #412]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fcb0 	bl	8000950 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fcac 	bl	8000950 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e1fa      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001006:	4b5d      	ldr	r3, [pc, #372]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0xe4>
 8001012:	e014      	b.n	800103e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fc9c 	bl	8000950 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff fc98 	bl	8000950 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e1e6      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102e:	4b53      	ldr	r3, [pc, #332]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x10c>
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d063      	beq.n	8001112 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800104a:	4b4c      	ldr	r3, [pc, #304]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00b      	beq.n	800106e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001056:	4b49      	ldr	r3, [pc, #292]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b08      	cmp	r3, #8
 8001060:	d11c      	bne.n	800109c <HAL_RCC_OscConfig+0x18c>
 8001062:	4b46      	ldr	r3, [pc, #280]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d116      	bne.n	800109c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106e:	4b43      	ldr	r3, [pc, #268]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <HAL_RCC_OscConfig+0x176>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d001      	beq.n	8001086 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e1ba      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001086:	4b3d      	ldr	r3, [pc, #244]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4939      	ldr	r1, [pc, #228]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	e03a      	b.n	8001112 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d020      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010aa:	f7ff fc51 	bl	8000950 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b2:	f7ff fc4d 	bl	8000950 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e19b      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d0:	4b2a      	ldr	r3, [pc, #168]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4927      	ldr	r1, [pc, #156]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
 80010e4:	e015      	b.n	8001112 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fc30 	bl	8000950 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff fc2c 	bl	8000950 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e17a      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	2b00      	cmp	r3, #0
 800111c:	d03a      	beq.n	8001194 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d019      	beq.n	800115a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_RCC_OscConfig+0x274>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112c:	f7ff fc10 	bl	8000950 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001134:	f7ff fc0c 	bl	8000950 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e15a      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f000 fab8 	bl	80016c8 <RCC_Delay>
 8001158:	e01c      	b.n	8001194 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_RCC_OscConfig+0x274>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001160:	f7ff fbf6 	bl	8000950 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001166:	e00f      	b.n	8001188 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001168:	f7ff fbf2 	bl	8000950 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d908      	bls.n	8001188 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e140      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	42420000 	.word	0x42420000
 8001184:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001188:	4b9e      	ldr	r3, [pc, #632]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1e9      	bne.n	8001168 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80a6 	beq.w	80012ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a6:	4b97      	ldr	r3, [pc, #604]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10d      	bne.n	80011ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b94      	ldr	r3, [pc, #592]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a93      	ldr	r2, [pc, #588]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b91      	ldr	r3, [pc, #580]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ca:	2301      	movs	r3, #1
 80011cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ce:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <HAL_RCC_OscConfig+0x4f8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d118      	bne.n	800120c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011da:	4b8b      	ldr	r3, [pc, #556]	; (8001408 <HAL_RCC_OscConfig+0x4f8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a8a      	ldr	r2, [pc, #552]	; (8001408 <HAL_RCC_OscConfig+0x4f8>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fbb3 	bl	8000950 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ee:	f7ff fbaf 	bl	8000950 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b64      	cmp	r3, #100	; 0x64
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e0fd      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	4b81      	ldr	r3, [pc, #516]	; (8001408 <HAL_RCC_OscConfig+0x4f8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d106      	bne.n	8001222 <HAL_RCC_OscConfig+0x312>
 8001214:	4b7b      	ldr	r3, [pc, #492]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4a7a      	ldr	r2, [pc, #488]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6213      	str	r3, [r2, #32]
 8001220:	e02d      	b.n	800127e <HAL_RCC_OscConfig+0x36e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0x334>
 800122a:	4b76      	ldr	r3, [pc, #472]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a75      	ldr	r2, [pc, #468]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	6213      	str	r3, [r2, #32]
 8001236:	4b73      	ldr	r3, [pc, #460]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	4a72      	ldr	r2, [pc, #456]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	6213      	str	r3, [r2, #32]
 8001242:	e01c      	b.n	800127e <HAL_RCC_OscConfig+0x36e>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b05      	cmp	r3, #5
 800124a:	d10c      	bne.n	8001266 <HAL_RCC_OscConfig+0x356>
 800124c:	4b6d      	ldr	r3, [pc, #436]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	4a6c      	ldr	r2, [pc, #432]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6213      	str	r3, [r2, #32]
 8001258:	4b6a      	ldr	r3, [pc, #424]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4a69      	ldr	r2, [pc, #420]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6213      	str	r3, [r2, #32]
 8001264:	e00b      	b.n	800127e <HAL_RCC_OscConfig+0x36e>
 8001266:	4b67      	ldr	r3, [pc, #412]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4a66      	ldr	r2, [pc, #408]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	6213      	str	r3, [r2, #32]
 8001272:	4b64      	ldr	r3, [pc, #400]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a63      	ldr	r2, [pc, #396]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	f023 0304 	bic.w	r3, r3, #4
 800127c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d015      	beq.n	80012b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fb63 	bl	8000950 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	e00a      	b.n	80012a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f7ff fb5f 	bl	8000950 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f241 3288 	movw	r2, #5000	; 0x1388
 800129c:	4293      	cmp	r3, r2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e0ab      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a4:	4b57      	ldr	r3, [pc, #348]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0ee      	beq.n	800128e <HAL_RCC_OscConfig+0x37e>
 80012b0:	e014      	b.n	80012dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fb4d 	bl	8000950 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff fb49 	bl	8000950 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e095      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d0:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1ee      	bne.n	80012ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d105      	bne.n	80012ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e2:	4b48      	ldr	r3, [pc, #288]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a47      	ldr	r2, [pc, #284]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8081 	beq.w	80013fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f8:	4b42      	ldr	r3, [pc, #264]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b08      	cmp	r3, #8
 8001302:	d061      	beq.n	80013c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d146      	bne.n	800139a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130c:	4b3f      	ldr	r3, [pc, #252]	; (800140c <HAL_RCC_OscConfig+0x4fc>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fb1d 	bl	8000950 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131a:	f7ff fb19 	bl	8000950 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e067      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132c:	4b35      	ldr	r3, [pc, #212]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f0      	bne.n	800131a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d108      	bne.n	8001354 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001342:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	492d      	ldr	r1, [pc, #180]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a19      	ldr	r1, [r3, #32]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	430b      	orrs	r3, r1
 8001366:	4927      	ldr	r1, [pc, #156]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <HAL_RCC_OscConfig+0x4fc>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff faed 	bl	8000950 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137a:	f7ff fae9 	bl	8000950 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e037      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x46a>
 8001398:	e02f      	b.n	80013fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_RCC_OscConfig+0x4fc>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fad6 	bl	8000950 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff fad2 	bl	8000950 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e020      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x498>
 80013c6:	e018      	b.n	80013fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e013      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000
 8001408:	40007000 	.word	0x40007000
 800140c:	42420060 	.word	0x42420060

08001410 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0d0      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001424:	4b6a      	ldr	r3, [pc, #424]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d910      	bls.n	8001454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001432:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 0207 	bic.w	r2, r3, #7
 800143a:	4965      	ldr	r1, [pc, #404]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001442:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0b8      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800146c:	4b59      	ldr	r3, [pc, #356]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a58      	ldr	r2, [pc, #352]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001476:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001484:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a52      	ldr	r2, [pc, #328]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800148e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001490:	4b50      	ldr	r3, [pc, #320]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	494d      	ldr	r1, [pc, #308]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d040      	beq.n	8001530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d115      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e07f      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e073      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e06b      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f023 0203 	bic.w	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4936      	ldr	r1, [pc, #216]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001500:	f7ff fa26 	bl	8000950 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	e00a      	b.n	800151e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f7ff fa22 	bl	8000950 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e053      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 020c 	and.w	r2, r3, #12
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	429a      	cmp	r2, r3
 800152e:	d1eb      	bne.n	8001508 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d210      	bcs.n	8001560 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 0207 	bic.w	r2, r3, #7
 8001546:	4922      	ldr	r1, [pc, #136]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e032      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4916      	ldr	r1, [pc, #88]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	490e      	ldr	r1, [pc, #56]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800159e:	f000 f821 	bl	80015e4 <HAL_RCC_GetSysClockFreq>
 80015a2:	4602      	mov	r2, r0
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	490a      	ldr	r1, [pc, #40]	; (80015d8 <HAL_RCC_ClockConfig+0x1c8>)
 80015b0:	5ccb      	ldrb	r3, [r1, r3]
 80015b2:	fa22 f303 	lsr.w	r3, r2, r3
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <HAL_RCC_ClockConfig+0x1cc>)
 80015b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1d0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff f984 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40022000 	.word	0x40022000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	080025a8 	.word	0x080025a8
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_RCC_GetSysClockFreq+0x94>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b04      	cmp	r3, #4
 800160c:	d002      	beq.n	8001614 <HAL_RCC_GetSysClockFreq+0x30>
 800160e:	2b08      	cmp	r3, #8
 8001610:	d003      	beq.n	800161a <HAL_RCC_GetSysClockFreq+0x36>
 8001612:	e027      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_RCC_GetSysClockFreq+0x98>)
 8001616:	613b      	str	r3, [r7, #16]
      break;
 8001618:	e027      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	0c9b      	lsrs	r3, r3, #18
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001624:	5cd3      	ldrb	r3, [r2, r3]
 8001626:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d010      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_RCC_GetSysClockFreq+0x94>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	0c5b      	lsrs	r3, r3, #17
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_RCC_GetSysClockFreq+0xa0>)
 800163e:	5cd3      	ldrb	r3, [r2, r3]
 8001640:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_RCC_GetSysClockFreq+0x98>)
 8001646:	fb02 f203 	mul.w	r2, r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e004      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	613b      	str	r3, [r7, #16]
      break;
 8001662:	e002      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_RCC_GetSysClockFreq+0x98>)
 8001666:	613b      	str	r3, [r7, #16]
      break;
 8001668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800166a:	693b      	ldr	r3, [r7, #16]
}
 800166c:	4618      	mov	r0, r3
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	007a1200 	.word	0x007a1200
 8001680:	080025c0 	.word	0x080025c0
 8001684:	080025d0 	.word	0x080025d0
 8001688:	003d0900 	.word	0x003d0900

0800168c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <HAL_RCC_GetHCLKFreq+0x10>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	20000000 	.word	0x20000000

080016a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016a4:	f7ff fff2 	bl	800168c <HAL_RCC_GetHCLKFreq>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	0adb      	lsrs	r3, r3, #11
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	4903      	ldr	r1, [pc, #12]	; (80016c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b6:	5ccb      	ldrb	r3, [r1, r3]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	080025b8 	.word	0x080025b8

080016c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <RCC_Delay+0x34>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <RCC_Delay+0x38>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0a5b      	lsrs	r3, r3, #9
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016e4:	bf00      	nop
  }
  while (Delay --);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1e5a      	subs	r2, r3, #1
 80016ea:	60fa      	str	r2, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f9      	bne.n	80016e4 <RCC_Delay+0x1c>
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000000 	.word	0x20000000
 8001700:	10624dd3 	.word	0x10624dd3

08001704 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d07d      	beq.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001724:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10d      	bne.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4a4b      	ldr	r2, [pc, #300]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173a:	61d3      	str	r3, [r2, #28]
 800173c:	4b49      	ldr	r3, [pc, #292]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001748:	2301      	movs	r3, #1
 800174a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	4b46      	ldr	r3, [pc, #280]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d118      	bne.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a42      	ldr	r2, [pc, #264]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001764:	f7ff f8f4 	bl	8000950 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	e008      	b.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176c:	f7ff f8f0 	bl	8000950 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e06d      	b.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177e:	4b3a      	ldr	r3, [pc, #232]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800178a:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001792:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d02e      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d027      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017a8:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80017be:	4a29      	ldr	r2, [pc, #164]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d014      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff f8bf 	bl	8000950 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	e00a      	b.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff f8bb 	bl	8000950 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e036      	b.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ee      	beq.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4917      	ldr	r1, [pc, #92]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001806:	4313      	orrs	r3, r2
 8001808:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	4a13      	ldr	r2, [pc, #76]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	490b      	ldr	r1, [pc, #44]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d008      	beq.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	4904      	ldr	r1, [pc, #16]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	40007000 	.word	0x40007000
 800186c:	42420440 	.word	0x42420440

08001870 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b10      	cmp	r3, #16
 8001890:	d00a      	beq.n	80018a8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b10      	cmp	r3, #16
 8001896:	f200 808a 	bhi.w	80019ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d045      	beq.n	800192c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d075      	beq.n	8001992 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80018a6:	e082      	b.n	80019ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80018a8:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80018ae:	4b45      	ldr	r3, [pc, #276]	; (80019c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d07b      	beq.n	80019b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	4a41      	ldr	r2, [pc, #260]	; (80019c8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d015      	beq.n	80018fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018d2:	4b3c      	ldr	r3, [pc, #240]	; (80019c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	0c5b      	lsrs	r3, r3, #17
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80018de:	5cd3      	ldrb	r3, [r2, r3]
 80018e0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00d      	beq.n	8001908 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80018ec:	4a38      	ldr	r2, [pc, #224]	; (80019d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	e004      	b.n	8001908 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4a34      	ldr	r2, [pc, #208]	; (80019d4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001908:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001914:	d102      	bne.n	800191c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	61bb      	str	r3, [r7, #24]
      break;
 800191a:	e04a      	b.n	80019b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4a2d      	ldr	r2, [pc, #180]	; (80019d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	61bb      	str	r3, [r7, #24]
      break;
 800192a:	e042      	b.n	80019b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800193c:	d108      	bne.n	8001950 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	e01f      	b.n	8001990 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800195a:	d109      	bne.n	8001970 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001968:	f649 4340 	movw	r3, #40000	; 0x9c40
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	e00f      	b.n	8001990 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800197a:	d11c      	bne.n	80019b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d016      	beq.n	80019b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001988:	f24f 4324 	movw	r3, #62500	; 0xf424
 800198c:	61bb      	str	r3, [r7, #24]
      break;
 800198e:	e012      	b.n	80019b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001990:	e011      	b.n	80019b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001992:	f7ff fe85 	bl	80016a0 <HAL_RCC_GetPCLK2Freq>
 8001996:	4602      	mov	r2, r0
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	0b9b      	lsrs	r3, r3, #14
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	3301      	adds	r3, #1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	61bb      	str	r3, [r7, #24]
      break;
 80019ac:	e004      	b.n	80019b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80019ae:	bf00      	nop
 80019b0:	e002      	b.n	80019b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80019b2:	bf00      	nop
 80019b4:	e000      	b.n	80019b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80019b6:	bf00      	nop
    }
  }
  return (frequency);
 80019b8:	69bb      	ldr	r3, [r7, #24]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	080025d4 	.word	0x080025d4
 80019cc:	080025e4 	.word	0x080025e4
 80019d0:	007a1200 	.word	0x007a1200
 80019d4:	003d0900 	.word	0x003d0900
 80019d8:	aaaaaaab 	.word	0xaaaaaaab

080019dc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07a      	b.n	8001ae8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7c5b      	ldrb	r3, [r3, #17]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7fe fed4 	bl	80007b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 faea 	bl	8001fe8 <HAL_RTC_WaitForSynchro>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e061      	b.n	8001ae8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 fba3 	bl	8002170 <RTC_EnterInitMode>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2204      	movs	r2, #4
 8001a34:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e056      	b.n	8001ae8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0207 	bic.w	r2, r2, #7
 8001a48:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RTC_Init+0x114>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <HAL_RTC_Init+0x114>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RTC_Init+0x114>)
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4921      	ldr	r1, [pc, #132]	; (8001af0 <HAL_RTC_Init+0x114>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d003      	beq.n	8001a82 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e00e      	b.n	8001aa0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7ff fef4 	bl	8001870 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a88:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d104      	bne.n	8001a9a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e026      	b.n	8001ae8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	0c1a      	lsrs	r2, r3, #16
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f002 020f 	and.w	r2, r2, #15
 8001aac:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	b292      	uxth	r2, r2
 8001ab6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fb81 	bl	80021c0 <RTC_ExitInitMode>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00c      	b.n	8001ae8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
  }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40006c00 	.word	0x40006c00

08001af4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_RTC_SetTime+0x20>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e080      	b.n	8001c1a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	7c1b      	ldrb	r3, [r3, #16]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_RTC_SetTime+0x30>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e07a      	b.n	8001c1a <HAL_RTC_SetTime+0x126>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d113      	bne.n	8001b5e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001b40:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	785b      	ldrb	r3, [r3, #1]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	1a5b      	subs	r3, r3, r1
 8001b50:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001b52:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001b58:	4413      	add	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e01e      	b.n	8001b9c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fb71 	bl	800224a <RTC_Bcd2ToByte>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001b70:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	785b      	ldrb	r3, [r3, #1]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fb66 	bl	800224a <RTC_Bcd2ToByte>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	4613      	mov	r3, r2
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001b8a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fb5a 	bl	800224a <RTC_Bcd2ToByte>
 8001b96:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001b98:	4423      	add	r3, r4
 8001b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001b9c:	6979      	ldr	r1, [r7, #20]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa7f 	bl	80020a2 <RTC_WriteTimeCounter>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2204      	movs	r2, #4
 8001bae:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e02f      	b.n	8001c1a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0205 	bic.w	r2, r2, #5
 8001bc8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fa90 	bl	80020f0 <RTC_ReadAlarmCounter>
 8001bd0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d018      	beq.n	8001c0c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d214      	bcs.n	8001c0c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001be8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001bec:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001bee:	6939      	ldr	r1, [r7, #16]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 fa96 	bl	8002122 <RTC_WriteAlarmCounter>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2204      	movs	r2, #4
 8001c00:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e006      	b.n	8001c1a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
  }
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd90      	pop	{r4, r7, pc}
	...

08001c24 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_RTC_GetTime+0x28>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b5      	b.n	8001dbc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0ac      	b.n	8001dbc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f9ed 	bl	8002042 <RTC_ReadTimeCounter>
 8001c68:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4a55      	ldr	r2, [pc, #340]	; (8001dc4 <HAL_RTC_GetTime+0x1a0>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0adb      	lsrs	r3, r3, #11
 8001c74:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4b52      	ldr	r3, [pc, #328]	; (8001dc4 <HAL_RTC_GetTime+0x1a0>)
 8001c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c7e:	0adb      	lsrs	r3, r3, #11
 8001c80:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	4a4f      	ldr	r2, [pc, #316]	; (8001dc8 <HAL_RTC_GetTime+0x1a4>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	4a4a      	ldr	r2, [pc, #296]	; (8001dc4 <HAL_RTC_GetTime+0x1a0>)
 8001c9c:	fba2 1203 	umull	r1, r2, r2, r3
 8001ca0:	0ad2      	lsrs	r2, r2, #11
 8001ca2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001ca6:	fb01 f202 	mul.w	r2, r1, r2
 8001caa:	1a9a      	subs	r2, r3, r2
 8001cac:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RTC_GetTime+0x1a4>)
 8001cae:	fba3 1302 	umull	r1, r3, r3, r2
 8001cb2:	0959      	lsrs	r1, r3, #5
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	1a5b      	subs	r3, r3, r1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	1ad1      	subs	r1, r2, r3
 8001cbe:	b2ca      	uxtb	r2, r1
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b17      	cmp	r3, #23
 8001cc8:	d955      	bls.n	8001d76 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4a3f      	ldr	r2, [pc, #252]	; (8001dcc <HAL_RTC_GetTime+0x1a8>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001cd6:	6939      	ldr	r1, [r7, #16]
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <HAL_RTC_GetTime+0x1a8>)
 8001cda:	fba3 2301 	umull	r2, r3, r3, r1
 8001cde:	091a      	lsrs	r2, r3, #4
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	1aca      	subs	r2, r1, r3
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f9fd 	bl	80020f0 <RTC_ReadAlarmCounter>
 8001cf6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfe:	d008      	beq.n	8001d12 <HAL_RTC_GetTime+0xee>
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d904      	bls.n	8001d12 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	e002      	b.n	8001d18 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4a2d      	ldr	r2, [pc, #180]	; (8001dd0 <HAL_RTC_GetTime+0x1ac>)
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001d26:	69b9      	ldr	r1, [r7, #24]
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f9ba 	bl	80020a2 <RTC_WriteTimeCounter>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e041      	b.n	8001dbc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3e:	d00c      	beq.n	8001d5a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4413      	add	r3, r2
 8001d46:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001d48:	69f9      	ldr	r1, [r7, #28]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f9e9 	bl	8002122 <RTC_WriteAlarmCounter>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e030      	b.n	8001dbc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001d5a:	69f9      	ldr	r1, [r7, #28]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f9e0 	bl	8002122 <RTC_WriteAlarmCounter>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e027      	b.n	8001dbc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001d6c:	6979      	ldr	r1, [r7, #20]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fa88 	bl	8002284 <RTC_DateUpdate>
 8001d74:	e003      	b.n	8001d7e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01a      	beq.n	8001dba <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fa41 	bl	8002210 <RTC_ByteToBcd2>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	785b      	ldrb	r3, [r3, #1]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fa38 	bl	8002210 <RTC_ByteToBcd2>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	789b      	ldrb	r3, [r3, #2]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fa2f 	bl	8002210 <RTC_ByteToBcd2>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461a      	mov	r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	91a2b3c5 	.word	0x91a2b3c5
 8001dc8:	88888889 	.word	0x88888889
 8001dcc:	aaaaaaab 	.word	0xaaaaaaab
 8001dd0:	00015180 	.word	0x00015180

08001dd4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_RTC_SetDate+0x24>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e097      	b.n	8001f2c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	7c1b      	ldrb	r3, [r3, #16]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_RTC_SetDate+0x34>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e091      	b.n	8001f2c <HAL_RTC_SetDate+0x158>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2202      	movs	r2, #2
 8001e12:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	78da      	ldrb	r2, [r3, #3]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	785a      	ldrb	r2, [r3, #1]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	789a      	ldrb	r2, [r3, #2]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	739a      	strb	r2, [r3, #14]
 8001e32:	e01a      	b.n	8001e6a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	78db      	ldrb	r3, [r3, #3]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fa06 	bl	800224a <RTC_Bcd2ToByte>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	785b      	ldrb	r3, [r3, #1]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f9fd 	bl	800224a <RTC_Bcd2ToByte>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	789b      	ldrb	r3, [r3, #2]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 f9f4 	bl	800224a <RTC_Bcd2ToByte>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	7bdb      	ldrb	r3, [r3, #15]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	7b59      	ldrb	r1, [r3, #13]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	7b9b      	ldrb	r3, [r3, #14]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f000 fadf 	bl	800243c <RTC_WeekDayNum>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	7b1a      	ldrb	r2, [r3, #12]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f8d7 	bl	8002042 <RTC_ReadTimeCounter>
 8001e94:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <HAL_RTC_SetDate+0x160>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0adb      	lsrs	r3, r3, #11
 8001ea0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b18      	cmp	r3, #24
 8001ea6:	d93a      	bls.n	8001f1e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <HAL_RTC_SetDate+0x164>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <HAL_RTC_SetDate+0x168>)
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001ebe:	69f9      	ldr	r1, [r7, #28]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f8ee 	bl	80020a2 <RTC_WriteTimeCounter>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e027      	b.n	8001f2c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f907 	bl	80020f0 <RTC_ReadAlarmCounter>
 8001ee2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eea:	d018      	beq.n	8001f1e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d214      	bcs.n	8001f1e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001efa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001efe:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001f00:	69b9      	ldr	r1, [r7, #24]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f90d 	bl	8002122 <RTC_WriteAlarmCounter>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2204      	movs	r2, #4
 8001f12:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e006      	b.n	8001f2c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3720      	adds	r7, #32
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	91a2b3c5 	.word	0x91a2b3c5
 8001f38:	aaaaaaab 	.word	0xaaaaaaab
 8001f3c:	00015180 	.word	0x00015180

08001f40 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2100      	movs	r1, #0
 8001f52:	460a      	mov	r2, r1
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	460a      	mov	r2, r1
 8001f58:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_RTC_GetDate+0x26>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e03a      	b.n	8001fe0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4619      	mov	r1, r3
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff fe56 	bl	8001c24 <HAL_RTC_GetTime>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e02e      	b.n	8001fe0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	7b1a      	ldrb	r2, [r3, #12]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	7bda      	ldrb	r2, [r3, #15]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	7b5a      	ldrb	r2, [r3, #13]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	7b9a      	ldrb	r2, [r3, #14]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01a      	beq.n	8001fde <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	78db      	ldrb	r3, [r3, #3]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f92f 	bl	8002210 <RTC_ByteToBcd2>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	785b      	ldrb	r3, [r3, #1]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f926 	bl	8002210 <RTC_ByteToBcd2>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	789b      	ldrb	r3, [r3, #2]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f91d 	bl	8002210 <RTC_ByteToBcd2>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e01d      	b.n	800203a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0208 	bic.w	r2, r2, #8
 800200c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800200e:	f7fe fc9f 	bl	8000950 <HAL_GetTick>
 8002012:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002014:	e009      	b.n	800202a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002016:	f7fe fc9b 	bl	8000950 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002024:	d901      	bls.n	800202a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e007      	b.n	800203a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ee      	beq.n	8002016 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002042:	b480      	push	{r7}
 8002044:	b087      	sub	sp, #28
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	827b      	strh	r3, [r7, #18]
 800204e:	2300      	movs	r3, #0
 8002050:	823b      	strh	r3, [r7, #16]
 8002052:	2300      	movs	r3, #0
 8002054:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002072:	8a7a      	ldrh	r2, [r7, #18]
 8002074:	8a3b      	ldrh	r3, [r7, #16]
 8002076:	429a      	cmp	r2, r3
 8002078:	d008      	beq.n	800208c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800207a:	8a3b      	ldrh	r3, [r7, #16]
 800207c:	041a      	lsls	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	b29b      	uxth	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e004      	b.n	8002096 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800208c:	8a7b      	ldrh	r3, [r7, #18]
 800208e:	041a      	lsls	r2, r3, #16
 8002090:	89fb      	ldrh	r3, [r7, #14]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002096:	697b      	ldr	r3, [r7, #20]
}
 8002098:	4618      	mov	r0, r3
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f85d 	bl	8002170 <RTC_EnterInitMode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e011      	b.n	80020e6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	0c12      	lsrs	r2, r2, #16
 80020ca:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	b292      	uxth	r2, r2
 80020d4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f872 	bl	80021c0 <RTC_ExitInitMode>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	81fb      	strh	r3, [r7, #14]
 80020fc:	2300      	movs	r3, #0
 80020fe:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002110:	89fb      	ldrh	r3, [r7, #14]
 8002112:	041a      	lsls	r2, r3, #16
 8002114:	89bb      	ldrh	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f81d 	bl	8002170 <RTC_EnterInitMode>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e011      	b.n	8002166 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	0c12      	lsrs	r2, r2, #16
 800214a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	b292      	uxth	r2, r2
 8002154:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f832 	bl	80021c0 <RTC_ExitInitMode>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800217c:	f7fe fbe8 	bl	8000950 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002182:	e009      	b.n	8002198 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002184:	f7fe fbe4 	bl	8000950 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002192:	d901      	bls.n	8002198 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e00f      	b.n	80021b8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ee      	beq.n	8002184 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0210 	orr.w	r2, r2, #16
 80021b4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0210 	bic.w	r2, r2, #16
 80021da:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80021dc:	f7fe fbb8 	bl	8000950 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021e2:	e009      	b.n	80021f8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80021e4:	f7fe fbb4 	bl	8000950 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021f2:	d901      	bls.n	80021f8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e007      	b.n	8002208 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0ee      	beq.n	80021e4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800221e:	e005      	b.n	800222c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3301      	adds	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	3b0a      	subs	r3, #10
 800222a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b09      	cmp	r3, #9
 8002230:	d8f6      	bhi.n	8002220 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	b2da      	uxtb	r2, r3
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	4313      	orrs	r3, r2
 800223e:	b2db      	uxtb	r3, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	b2da      	uxtb	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	4413      	add	r3, r2
 8002278:	b2db      	uxtb	r3, r3
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7bdb      	ldrb	r3, [r3, #15]
 80022a2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7b5b      	ldrb	r3, [r3, #13]
 80022a8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7b9b      	ldrb	r3, [r3, #14]
 80022ae:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	e06f      	b.n	8002396 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d011      	beq.n	80022e0 <RTC_DateUpdate+0x5c>
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d00e      	beq.n	80022e0 <RTC_DateUpdate+0x5c>
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d00b      	beq.n	80022e0 <RTC_DateUpdate+0x5c>
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b07      	cmp	r3, #7
 80022cc:	d008      	beq.n	80022e0 <RTC_DateUpdate+0x5c>
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d005      	beq.n	80022e0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	2b0a      	cmp	r3, #10
 80022d8:	d002      	beq.n	80022e0 <RTC_DateUpdate+0x5c>
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d117      	bne.n	8002310 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b1e      	cmp	r3, #30
 80022e4:	d803      	bhi.n	80022ee <RTC_DateUpdate+0x6a>
      {
        day++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80022ec:	e050      	b.n	8002390 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b0c      	cmp	r3, #12
 80022f2:	d005      	beq.n	8002300 <RTC_DateUpdate+0x7c>
        {
          month++;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3301      	adds	r3, #1
 80022f8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80022fa:	2301      	movs	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80022fe:	e047      	b.n	8002390 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002300:	2301      	movs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002304:	2301      	movs	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
          year++;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3301      	adds	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800230e:	e03f      	b.n	8002390 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b04      	cmp	r3, #4
 8002314:	d008      	beq.n	8002328 <RTC_DateUpdate+0xa4>
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b06      	cmp	r3, #6
 800231a:	d005      	beq.n	8002328 <RTC_DateUpdate+0xa4>
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b09      	cmp	r3, #9
 8002320:	d002      	beq.n	8002328 <RTC_DateUpdate+0xa4>
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b0b      	cmp	r3, #11
 8002326:	d10c      	bne.n	8002342 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b1d      	cmp	r3, #29
 800232c:	d803      	bhi.n	8002336 <RTC_DateUpdate+0xb2>
      {
        day++;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002334:	e02c      	b.n	8002390 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	3301      	adds	r3, #1
 800233a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800233c:	2301      	movs	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002340:	e026      	b.n	8002390 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d123      	bne.n	8002390 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b1b      	cmp	r3, #27
 800234c:	d803      	bhi.n	8002356 <RTC_DateUpdate+0xd2>
      {
        day++;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3301      	adds	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e01c      	b.n	8002390 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b1c      	cmp	r3, #28
 800235a:	d111      	bne.n	8002380 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f839 	bl	80023d8 <RTC_IsLeapYear>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <RTC_DateUpdate+0xf0>
        {
          day++;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3301      	adds	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	e00d      	b.n	8002390 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	3301      	adds	r3, #1
 8002378:	613b      	str	r3, [r7, #16]
          day = 1U;
 800237a:	2301      	movs	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e007      	b.n	8002390 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b1d      	cmp	r3, #29
 8002384:	d104      	bne.n	8002390 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	3301      	adds	r3, #1
 800238a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800238c:	2301      	movs	r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3301      	adds	r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d38b      	bcc.n	80022b6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	6978      	ldr	r0, [r7, #20]
 80023c2:	f000 f83b 	bl	800243c <RTC_WeekDayNum>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	731a      	strb	r2, [r3, #12]
}
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e01d      	b.n	800242e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	4a10      	ldr	r2, [pc, #64]	; (8002438 <RTC_IsLeapYear+0x60>)
 80023f6:	fba2 1203 	umull	r1, r2, r2, r3
 80023fa:	0952      	lsrs	r2, r2, #5
 80023fc:	2164      	movs	r1, #100	; 0x64
 80023fe:	fb01 f202 	mul.w	r2, r1, r2
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800240a:	2301      	movs	r3, #1
 800240c:	e00f      	b.n	800242e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	4a09      	ldr	r2, [pc, #36]	; (8002438 <RTC_IsLeapYear+0x60>)
 8002412:	fba2 1203 	umull	r1, r2, r2, r3
 8002416:	09d2      	lsrs	r2, r2, #7
 8002418:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800241c:	fb01 f202 	mul.w	r2, r1, r2
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800242c:	2300      	movs	r3, #0
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	51eb851f 	.word	0x51eb851f

0800243c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
 8002448:	4613      	mov	r3, r2
 800244a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800245a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d82d      	bhi.n	80024be <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <RTC_WeekDayNum+0xe4>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	085a      	lsrs	r2, r3, #1
 8002476:	78bb      	ldrb	r3, [r7, #2]
 8002478:	441a      	add	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	441a      	add	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3b01      	subs	r3, #1
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	441a      	add	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	3b01      	subs	r3, #1
 800248a:	4926      	ldr	r1, [pc, #152]	; (8002524 <RTC_WeekDayNum+0xe8>)
 800248c:	fba1 1303 	umull	r1, r3, r1, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	1ad2      	subs	r2, r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3b01      	subs	r3, #1
 8002498:	4922      	ldr	r1, [pc, #136]	; (8002524 <RTC_WeekDayNum+0xe8>)
 800249a:	fba1 1303 	umull	r1, r3, r1, r3
 800249e:	09db      	lsrs	r3, r3, #7
 80024a0:	4413      	add	r3, r2
 80024a2:	1d1a      	adds	r2, r3, #4
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <RTC_WeekDayNum+0xec>)
 80024a6:	fba3 1302 	umull	r1, r3, r3, r2
 80024aa:	1ad1      	subs	r1, r2, r3
 80024ac:	0849      	lsrs	r1, r1, #1
 80024ae:	440b      	add	r3, r1
 80024b0:	0899      	lsrs	r1, r3, #2
 80024b2:	460b      	mov	r3, r1
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	1a5b      	subs	r3, r3, r1
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e029      	b.n	8002512 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	4a15      	ldr	r2, [pc, #84]	; (8002520 <RTC_WeekDayNum+0xe4>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	085a      	lsrs	r2, r3, #1
 80024d2:	78bb      	ldrb	r3, [r7, #2]
 80024d4:	441a      	add	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	441a      	add	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	441a      	add	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4910      	ldr	r1, [pc, #64]	; (8002524 <RTC_WeekDayNum+0xe8>)
 80024e4:	fba1 1303 	umull	r1, r3, r1, r3
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	490d      	ldr	r1, [pc, #52]	; (8002524 <RTC_WeekDayNum+0xe8>)
 80024f0:	fba1 1303 	umull	r1, r3, r1, r3
 80024f4:	09db      	lsrs	r3, r3, #7
 80024f6:	4413      	add	r3, r2
 80024f8:	1c9a      	adds	r2, r3, #2
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <RTC_WeekDayNum+0xec>)
 80024fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002500:	1ad1      	subs	r1, r2, r3
 8002502:	0849      	lsrs	r1, r1, #1
 8002504:	440b      	add	r3, r1
 8002506:	0899      	lsrs	r1, r3, #2
 8002508:	460b      	mov	r3, r1
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a5b      	subs	r3, r3, r1
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	b2db      	uxtb	r3, r3
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	38e38e39 	.word	0x38e38e39
 8002524:	51eb851f 	.word	0x51eb851f
 8002528:	24924925 	.word	0x24924925

0800252c <__libc_init_array>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	2600      	movs	r6, #0
 8002530:	4d0c      	ldr	r5, [pc, #48]	; (8002564 <__libc_init_array+0x38>)
 8002532:	4c0d      	ldr	r4, [pc, #52]	; (8002568 <__libc_init_array+0x3c>)
 8002534:	1b64      	subs	r4, r4, r5
 8002536:	10a4      	asrs	r4, r4, #2
 8002538:	42a6      	cmp	r6, r4
 800253a:	d109      	bne.n	8002550 <__libc_init_array+0x24>
 800253c:	f000 f822 	bl	8002584 <_init>
 8002540:	2600      	movs	r6, #0
 8002542:	4d0a      	ldr	r5, [pc, #40]	; (800256c <__libc_init_array+0x40>)
 8002544:	4c0a      	ldr	r4, [pc, #40]	; (8002570 <__libc_init_array+0x44>)
 8002546:	1b64      	subs	r4, r4, r5
 8002548:	10a4      	asrs	r4, r4, #2
 800254a:	42a6      	cmp	r6, r4
 800254c:	d105      	bne.n	800255a <__libc_init_array+0x2e>
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	f855 3b04 	ldr.w	r3, [r5], #4
 8002554:	4798      	blx	r3
 8002556:	3601      	adds	r6, #1
 8002558:	e7ee      	b.n	8002538 <__libc_init_array+0xc>
 800255a:	f855 3b04 	ldr.w	r3, [r5], #4
 800255e:	4798      	blx	r3
 8002560:	3601      	adds	r6, #1
 8002562:	e7f2      	b.n	800254a <__libc_init_array+0x1e>
 8002564:	080025e8 	.word	0x080025e8
 8002568:	080025e8 	.word	0x080025e8
 800256c:	080025e8 	.word	0x080025e8
 8002570:	080025ec 	.word	0x080025ec

08002574 <memset>:
 8002574:	4603      	mov	r3, r0
 8002576:	4402      	add	r2, r0
 8002578:	4293      	cmp	r3, r2
 800257a:	d100      	bne.n	800257e <memset+0xa>
 800257c:	4770      	bx	lr
 800257e:	f803 1b01 	strb.w	r1, [r3], #1
 8002582:	e7f9      	b.n	8002578 <memset+0x4>

08002584 <_init>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	bf00      	nop
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr

08002590 <_fini>:
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002592:	bf00      	nop
 8002594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002596:	bc08      	pop	{r3}
 8002598:	469e      	mov	lr, r3
 800259a:	4770      	bx	lr
